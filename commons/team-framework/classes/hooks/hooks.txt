/**	
	HOOKS TRASWEB 
*/


#### Filters ####

Cuando se necesita modificar, o dar la posibilidad de modificar, un dato.
- No se puede finalizar, cancelar.
- Devuelve el dato una vez procesado.
- Devuelve el dato del mismo tipo que el procesado

Ejemplo: 
$post_data =\team\Filter::apply('\post\add', $post_data);

En el ejemplo, se va a añadir un post pero antes se quiere dar la posibilidad de que algún hook pueda
modificar los datos de este.


#### Tasks ####

Cuando se necesitar realizar una tarea, o dar la posibilidad de que otros hagan la tarea, o se quiere hacer una tarea en cadena(pipeline). 
- Se puede cancelar, hacer y finalizar.
- Devuelve el valor realizado por la/s tarea/s o un valor por defecto si no se realizó la tarea. Si este valor por defecto es un callback, se llamará.
- Devuelve, por tanto, un valor muy diferente a los pasados para realizar la tarea.

Ejemplo:

$idpost = \team\Task('\post\add', function(& $post_data) {
  //función por defecto para la inserción del dato.
}->with($post_data);

- Los argumentos se mandan por referencia, por lo que es posibles modificarlos y que repercuta en los siguientes workers. 
- Las tareas son boxing por lo que es posible asignarse valores y luego recuperarlos más adelante

#### Events ####

Cuando se necesita avisar de que se ha realizado o se va a realizar una tarea. 
- Se puede cancelar( devolviendo true, en algún hook) la propagación del evento
- devuelve si se cancelo(true) o no(false) la propagación del evento.


\team\Event('\post\add', $idpost, $post_data); //Se avisa de que se añadió un nuevo post

